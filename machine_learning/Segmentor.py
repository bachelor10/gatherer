import numpy as np
import math
from predictor import Predictor
from machine_learning.Preprosessor import Preprocessor


class YGroup:
    def __init__(self, max_y, min_y, pairs):

        self.max_y = max_y
        self.min_y = min_y
        self.y_center = self.max_y - (self.max_y - self.min_y) / 2
        self.pairs = pairs

    def in_y_group(self, max_y, min_y):

        y_center = max_y - (max_y - min_y) / 2

        return y_center > self.min_y and y_center < self.max_y

    def add_new_pair(self, pair):
        print("Add new pair", pair)
        self.pairs.append(pair)

    def add_trace_to_last_pair(self, trace):
        print("Add trace to last pair", trace)

        self.pairs[-1].append(trace)


class Segmentor:
    def __init__(self, traces):
        self.traces = np.asarray(traces)
        max_y, min_y, d = self.find_center_y([traces[0]])
        self.y_groups = [YGroup(max_y, min_y, [[0]])]

    def find_center_y(self, traces):
        max_y = -math.inf
        min_y = math.inf
        for trace in traces:
            y_values = np.asarray(trace)[:, 1]
            max_y = max(max_y, np.max(y_values))
            min_y = min(min_y, np.min(y_values))

        return max_y, min_y, max_y - min_y

    def is_overlapping(self, x_1, x_2):

        for cells_1 in x_1:
            for cells_2 in x_2:
                if np.abs(cells_1 - cells_2) < 10: return True
        return False

    def find_y_group(self, max_y, min_y):

        for group in self.y_groups:
            if(group.in_y_group(max_y, min_y)):
                return group

        return None


    def find_y_overlapping(self):

        i = 0

        while i < len(self.traces) - 1:

            this_max_y, this_min_y, this_dist = self.find_center_y([self.traces[i + 1]])

            y_group = self.find_y_group(this_max_y, this_min_y)

            if(self.is_overlapping(np.asarray(self.traces[i])[:, 0], np.asarray(self.traces[i+1])[:, 0])):

                if(y_group):
                    y_group.add_trace_to_last_pair(i + 1)

                else:
                    y_group = YGroup(this_max_y, this_min_y, [[i+1]])
                    self.y_groups.append(y_group)

            else:
                if(y_group):
                    y_group.add_new_pair([i + 1])

                else:
                    y_group = YGroup(this_max_y, this_min_y, [[i+1]])
                    self.y_groups.append(y_group)

            i += 1


        for p in self.y_groups:
            print(p.pairs)



#2 / 3 + 3 = 6

if __name__ == '__main__':
    #traces = [[[166, 109], [169, 108], [173, 106], [177, 104], [189, 102], [195, 100], [210, 97], [218, 97], [224, 97], [235, 97], [242, 97], [247, 100], [252, 104], [256, 107], [263, 121], [263, 135], [263, 144], [258, 157], [257, 159], [256, 160], [253, 162], [248, 166], [235, 173], [228, 178], [212, 185], [205, 188], [195, 195], [189, 198], [181, 204], [174, 209], [172, 212], [169, 213], [168, 215], [167, 216], [167, 219], [167, 220], [169, 224], [172, 226], [178, 228], [184, 230], [196, 233], [209, 236], [216, 236], [222, 236], [230, 238], [234, 238], [237, 238]], [[129, 296], [132, 296], [134, 296], [141, 296], [149, 295], [165, 292], [172, 292], [189, 289], [207, 288], [216, 287], [240, 287], [250, 287], [273, 289], [275, 288], [280, 288], [283, 289], [285, 290], [289, 291]], [[216, 325], [217, 326], [218, 325], [220, 325], [222, 326], [226, 326], [228, 327], [234, 328], [236, 328], [244, 330], [250, 332], [256, 335], [260, 337], [265, 343], [269, 354], [269, 359], [268, 364], [264, 374], [261, 378], [256, 383], [253, 386], [245, 390], [237, 394], [233, 395], [225, 398], [222, 398], [217, 400], [215, 400], [212, 400], [210, 402], [210, 403], [212, 404], [212, 405], [220, 412], [228, 417], [231, 419], [233, 422], [235, 422], [237, 426], [240, 431], [240, 432], [240, 443], [237, 450], [234, 459], [228, 465], [224, 468], [216, 473], [212, 474], [206, 476], [201, 476], [199, 476], [194, 476], [192, 476], [187, 476], [184, 476]], [[376, 284], [376, 284], [378, 284], [380, 284], [384, 285], [388, 286], [396, 287], [406, 288], [411, 289], [419, 289], [424, 290], [434, 290], [439, 290], [446, 290], [451, 290], [453, 290]], [[427, 245], [427, 246], [427, 248], [427, 248], [427, 252], [427, 259], [426, 264], [426, 273], [426, 277], [426, 290], [426, 296], [426, 304], [426, 308], [426, 314], [426, 319], [426, 321], [426, 326], [426, 330]], [[527, 238], [528, 238], [528, 236], [530, 236], [535, 232], [537, 230], [549, 222], [559, 217], [564, 216], [575, 212], [580, 211], [588, 209], [595, 209], [597, 209], [605, 210], [610, 212], [620, 220], [628, 236], [629, 241], [627, 253], [624, 259], [611, 284], [605, 291], [587, 312], [570, 330], [561, 338], [549, 348], [545, 351], [536, 358], [532, 361], [523, 367], [515, 371], [512, 372], [509, 374], [508, 374], [508, 376], [509, 377], [510, 376], [515, 376], [521, 377], [533, 377], [552, 376], [560, 376], [576, 376], [583, 376], [595, 374], [607, 372], [612, 371], [624, 368], [629, 367], [638, 364], [640, 364]], [[728, 272], [732, 272], [735, 271], [746, 271], [752, 271], [761, 271], [767, 271], [777, 271], [782, 271], [784, 271], [790, 271], [792, 271], [795, 271]], [[708, 323], [709, 323], [710, 323], [712, 323], [712, 322], [716, 322], [717, 321], [724, 320], [728, 320], [734, 320], [743, 319], [748, 319], [758, 316], [764, 316], [772, 316], [776, 316], [783, 315], [792, 313]], [[864, 174], [864, 180], [863, 184], [859, 210], [857, 212], [856, 224], [856, 232], [856, 236], [856, 243], [856, 245], [856, 249], [859, 254], [861, 257], [867, 263], [870, 265], [880, 271], [884, 272], [889, 273], [905, 276], [912, 276], [922, 276], [926, 276], [932, 276], [934, 276]], [[940, 179], [940, 183], [939, 186], [939, 187], [936, 195], [934, 202], [932, 216], [928, 234], [926, 248], [923, 280], [921, 299], [921, 306], [921, 314], [921, 320], [921, 332], [921, 335], [922, 348], [922, 359], [922, 360], [922, 368], [921, 376], [921, 376], [921, 380], [921, 381], [921, 383]]]

    #2 - 3 / 5 + 4
    traces = [[[172, 64], [173, 63], [176, 61], [179, 60], [182, 58], [189, 55], [199, 52], [205, 50], [214, 49], [219, 49], [222, 49], [230, 49], [233, 50], [239, 52], [242, 52], [248, 54], [259, 61], [264, 65], [271, 72], [276, 83], [280, 100], [280, 103], [276, 127], [269, 138], [264, 145], [252, 158], [245, 164], [229, 181], [212, 190], [205, 193], [198, 197], [196, 199], [191, 202], [189, 203], [184, 204], [181, 207], [179, 207], [176, 209], [174, 209], [172, 212], [172, 212], [172, 213], [173, 215], [176, 215], [182, 216], [199, 217], [204, 217], [222, 217], [226, 217], [246, 217], [254, 217], [268, 217], [272, 217], [284, 217], [299, 217], [305, 218], [308, 217]], [[396, 141], [399, 140], [402, 140], [404, 139], [408, 138], [430, 135], [446, 133], [452, 133], [458, 132], [465, 133], [479, 132], [483, 132], [486, 132], [492, 132], [493, 133], [496, 132]], [[460, 99], [459, 100], [458, 105], [458, 108], [458, 112], [458, 116], [458, 118], [458, 122], [458, 124], [458, 135], [458, 140], [458, 146], [458, 148], [459, 160], [459, 172], [459, 173], [459, 178], [459, 180]], [[602, 65], [607, 64], [612, 63], [622, 61], [629, 60], [633, 60], [640, 60], [653, 60], [660, 61], [662, 62], [665, 63], [668, 65], [676, 73], [679, 76], [680, 79], [682, 90], [682, 95], [682, 104], [679, 110], [672, 124], [666, 128], [655, 139], [643, 148], [637, 152], [627, 157], [619, 160], [618, 160], [616, 160], [616, 160], [616, 159], [616, 158], [617, 157], [620, 156], [622, 155], [626, 154], [629, 154], [637, 153], [640, 153], [662, 159], [675, 165], [680, 168], [682, 175], [684, 178], [684, 183], [684, 186], [684, 190], [684, 195], [682, 199], [677, 205], [672, 210], [667, 212], [657, 217], [652, 219], [642, 220], [640, 220], [636, 220], [631, 220], [627, 220], [624, 220]], [[119, 293], [122, 293], [126, 294], [136, 295], [144, 296], [163, 297], [175, 297], [197, 299], [208, 299], [232, 299], [258, 300], [272, 300], [300, 301], [325, 302], [336, 301], [360, 302], [372, 302], [393, 304], [402, 304], [427, 307], [452, 308], [463, 308], [476, 308], [485, 309], [500, 308], [520, 308], [531, 308], [540, 308], [552, 308], [564, 308], [571, 308], [579, 308], [588, 308], [592, 308], [603, 308], [612, 310], [620, 311], [622, 311], [627, 311], [638, 311], [643, 311], [653, 311], [656, 311], [664, 311], [672, 311], [675, 311], [680, 311], [683, 311], [687, 311], [689, 311], [692, 311]], [[416, 374], [416, 379], [415, 383], [412, 400], [410, 411], [408, 428], [407, 444], [407, 445], [405, 458], [405, 463], [404, 472], [403, 477], [403, 478], [403, 479], [404, 479], [404, 479], [406, 479], [411, 478], [414, 476], [422, 472], [429, 470], [437, 468], [451, 463], [458, 461], [460, 461], [464, 461], [465, 462], [475, 465], [479, 468], [483, 472], [486, 479], [488, 482], [488, 487], [488, 488], [487, 496], [484, 508], [484, 509], [473, 523], [468, 527], [464, 529], [460, 530], [453, 531], [446, 532], [442, 532], [436, 532], [434, 532], [429, 531], [424, 530], [421, 530]], [[408, 381], [412, 381], [415, 381], [427, 381], [440, 381], [446, 381], [464, 381], [472, 381], [479, 381], [486, 381], [489, 382]]]
    #2 / 4
    #traces = [[[386, 78], [390, 77], [395, 76], [414, 71], [424, 67], [444, 62], [462, 58], [467, 58], [477, 60], [480, 60], [490, 67], [502, 78], [504, 80], [513, 105], [513, 107], [514, 125], [513, 133], [512, 144], [505, 155], [500, 162], [481, 182], [471, 189], [456, 199], [441, 207], [434, 210], [420, 216], [417, 217], [411, 218], [408, 219], [403, 220], [400, 220], [399, 221], [397, 222], [396, 221], [397, 222], [400, 222], [403, 223], [406, 224], [421, 227], [444, 229], [456, 231], [474, 231], [484, 231], [498, 231], [504, 231], [516, 231], [519, 231]], [[299, 296], [303, 296], [308, 296], [313, 297], [324, 298], [342, 301], [364, 304], [378, 306], [398, 307], [408, 308], [439, 308], [466, 308], [476, 308], [497, 307], [506, 307], [522, 306], [540, 306], [548, 306], [564, 306], [568, 306], [579, 306], [584, 306], [595, 306], [600, 306], [603, 306], [607, 306], [608, 306]], [[420, 368], [419, 374], [416, 388], [416, 393], [415, 405], [413, 418], [412, 424], [412, 436], [412, 444], [412, 457], [412, 460], [412, 466], [412, 472], [412, 473], [412, 477], [412, 479], [412, 482], [414, 484], [415, 486], [417, 489], [420, 489], [426, 491], [438, 490], [446, 489], [452, 489], [464, 487], [484, 484], [491, 484], [497, 483], [506, 481], [511, 479], [519, 475], [524, 474], [528, 472]], [[512, 411], [512, 412], [512, 415], [512, 426], [512, 440], [512, 452], [512, 469], [512, 483], [514, 516], [514, 530], [514, 540], [514, 546], [514, 547], [514, 551], [514, 552], [514, 555], [514, 559]]]

    #4 + 4 = 6
    #traces = [[[69, 155], [72, 155], [73, 155], [81, 154], [92, 154], [107, 155], [129, 160], [139, 162], [155, 168], [156, 169], [162, 175], [172, 188], [175, 200], [178, 230], [177, 244], [170, 266], [160, 280], [153, 288], [143, 296], [139, 299], [132, 304], [122, 311], [120, 312], [116, 313], [115, 314], [112, 316], [109, 317], [109, 318], [108, 319], [108, 320], [109, 322], [111, 324], [123, 328], [139, 333], [150, 335], [166, 337], [174, 337], [188, 336], [201, 336], [204, 336], [217, 335], [223, 335]], [[312, 237], [316, 238], [325, 240], [336, 241], [354, 244], [375, 244], [384, 244], [398, 244], [404, 244], [413, 244]], [[366, 191], [366, 192], [366, 198], [366, 209], [366, 213], [366, 224], [368, 239], [369, 249], [370, 257], [371, 264], [372, 272], [372, 276], [373, 282]], [[492, 154], [492, 154], [493, 154], [495, 154], [503, 155], [507, 155], [523, 160], [531, 161], [542, 164], [549, 167], [560, 171], [567, 176], [571, 178], [584, 193], [592, 204], [594, 221], [591, 241], [588, 248], [580, 264], [568, 281], [552, 299], [544, 308], [534, 318], [528, 323], [526, 324], [524, 326], [523, 328], [520, 329], [519, 330], [519, 331], [519, 332], [519, 332], [521, 332], [524, 333], [533, 335], [544, 337], [551, 337], [572, 339], [584, 340], [608, 340], [629, 336]], [[686, 217], [689, 217], [701, 217], [708, 218], [725, 219], [734, 219], [751, 219], [759, 219], [771, 220], [778, 220], [791, 221], [800, 222]], [[699, 275], [704, 275], [712, 275], [724, 275], [744, 276], [766, 276], [775, 277], [784, 276], [789, 276], [794, 276]], [[863, 130], [861, 136], [859, 150], [856, 160], [852, 192], [852, 199], [851, 214], [851, 216], [854, 228], [856, 234], [857, 236], [864, 242], [869, 246], [873, 248], [884, 250], [900, 251], [908, 251], [914, 251], [926, 246], [932, 241]], [[926, 180], [926, 183], [926, 188], [926, 200], [926, 206], [929, 244], [931, 265], [933, 293], [934, 315], [934, 324], [934, 346], [934, 364]]]
    classes = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "-", "+", "="]
    segmentor = Segmentor(traces)

    pairs = segmentor.find_y_overlapping()

    print("Pairs", pairs)
    """
    predictor = Predictor()

    preprocessor = Preprocessor()

    for pair in pairs:
        traceGroup = []
        try:
            traceGroup = [traces[val] for val in pair]

        except:
            traceGroup = [traces[pair]]

        image = preprocessor.pre_process(traceGroup)

        pred = predictor.predict2(image)
        print(classes[np.argmax(predictor.predict2(image)[0])])

"""